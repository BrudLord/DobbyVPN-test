name: Release

on:
  push:
    tags:
      - 'v*'

jobs:  
  windows_build:
    runs-on: windows-latest
    strategy:
      matrix:
        go-version: [ '1.22.5' ]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
      - name: Install dependencies
        run: |
          cd src
          cd ..
      - name: Clone Cloak and copying ck-client
        run: |
          git submodule add https://github.com/cbeuw/Cloak
          git submodule init
          git submodule update
          mv -Force log-files/piper.go Cloak/internal/client/piper.go
          mv -Force log-files/connector.go Cloak/internal/client/connector.go
          mv -Force log-files/TLS.go Cloak/internal/client/TLS.go
          mv -Force log-files/copy.go Cloak/internal/common/copy.go
          mkdir Cloak/internal/out
          cp log-files/logging.go Cloak/internal/out/logging.go
          cp -r ck-client/Windows Cloak
          cp ck-client/app.go Cloak/Windows
          cp ck-client/ck-client.go Cloak/Windows
          cp ck-client/Icon.png Cloak/Windows
          cp ck-client/log_android.go Cloak/Windows
          cp ck-client/outline_device.go Cloak/Windows
          cp ck-client/outline_packet_proxy.go Cloak/Windows
          cp ck-client/protector.go Cloak/Windows
          cd Cloak/Windows
          go mod tidy
          go install fyne.io/fyne/v2/cmd/fyne@latest
          cd ../..
      - name: Build windows ck-client
        run: |
          cd Cloak/Windows
          fyne package -os windows
          cd ../..
      - name: Windows build
        run: |
          cd Cloak
          cd ..
      - name: Make windows zip
        run: |
          mkdir windows_client
          mv Cloak/Windows/Windows.exe windows_client/DobbyVPN.exe
          tar.exe -a -c -f windows_client.zip windows_client
      - name: Upload Windows client
        uses: actions/upload-artifact@master
        with:
          name: windows_client.zip
          path: windows_client.zip

          
  linux_build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.22.5' ]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
      - name: Install dependencies
        run: |
          cd src
          go get ./...
          cd ..
          sudo apt-get install golang gcc libgl1-mesa-dev xorg-dev
          sudo apt-get install gcc-multilib
          sudo apt-get install gcc-mingw-w64
      - name: Clone Cloak and copying ck-client
        run: |
          git submodule add https://github.com/cbeuw/Cloak
          git submodule init
          git submodule update
          mv -f log-files/piper.go Cloak/internal/client/piper.go
          mv -f log-files/connector.go Cloak/internal/client/connector.go
          mv -f log-files/TLS.go Cloak/internal/client/TLS.go
          mv -f log-files/copy.go Cloak/internal/common/copy.go
          mkdir Cloak/internal/out
          cp log-files/logging.go Cloak/internal/out/logging.go
          cp -r ck-client/Linux Cloak
          cp ck-client/app.go Cloak/Linux
          cp ck-client/ck-client.go Cloak/Linux
          cp ck-client/Icon.png Cloak/Linux
          cp ck-client/log_android.go Cloak/Linux
          cp ck-client/outline_device.go Cloak/Linux
          cp ck-client/outline_packet_proxy.go Cloak/Linux
          cp ck-client/protector.go Cloak/Linux
          cd Cloak/Linux
          go mod tidy
          cd ../..
      - name: Build linux ck-client
        run: |
          cd Cloak/Linux
          go build -o DobbyVPN .
          cd ../..
      - name: Linux build
        run: |
          cd Cloak
          cd ..
      - name: Make linux zip
        run: |
          mkdir linux_client
          mv Cloak/Linux/DobbyVPN linux_client/DobbyVPN
          zip -r linux_client.zip linux_client
      - name: Upload Linux client
        uses: actions/upload-artifact@master
        with:
          name: linux_client.zip
          path: linux_client.zip
                    
          

  macos_build:
    runs-on: macos-latest
    strategy:
      matrix:
        go-version: [ '1.22.5' ]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
      - name: Clone Cloak and copying ck-client
        run: |
          git submodule add https://github.com/cbeuw/Cloak
          git submodule init
          git submodule update
          mv -f log-files/piper.go Cloak/internal/client/piper.go
          mv -f log-files/connector.go Cloak/internal/client/connector.go
          mv -f log-files/TLS.go Cloak/internal/client/TLS.go
          mv -f log-files/copy.go Cloak/internal/common/copy.go
          mkdir Cloak/internal/out
          cp log-files/logging.go Cloak/internal/out/logging.go
          cp -r ck-client/MacOs Cloak
          cp ck-client/app.go Cloak/MacOs
          cp ck-client/ck-client.go Cloak/MacOs
          cp ck-client/Icon.png Cloak/MacOs
          cp ck-client/log_android.go Cloak/MacOs
          cp ck-client/outline_device.go Cloak/MacOs
          cp ck-client/outline_packet_proxy.go Cloak/MacOs
          cp ck-client/protector.go Cloak/MacOs
          cd Cloak/MacOs
          go mod tidy
          go install fyne.io/fyne/v2/cmd/fyne@latest
          cd ../..

      - name: Build macos ck-client
        run: |
          cd Cloak/MacOs
          fyne package -os darwin
          cd ../..
      - name: MacOs build
        run: |
          cd Cloak
          cd ..
      - name: Make macos zip
        run: |
          mkdir macos_client
          mv Cloak/MacOs/MacOs.app macos_client/DobbyVPN.app
          zip -r macos_client.zip macos_client
      - name: Upload MacOs client
        uses: actions/upload-artifact@master
        with:
          name: macos_client.zip
          path: macos_client.zip
          
  android_build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.22.5' ]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Install dependencies
        run: |
          cd src
          go get ./...
          cd ..
          sudo apt-get install golang gcc libgl1-mesa-dev xorg-dev
          sudo apt-get install gcc-multilib
          sudo apt-get install gcc-mingw-w64
      - name: Android build
        run: |
          cd ck-android/CkClient
          chmod +x gradlew
          ./gradlew assembleDebug
          cd ../..
      - name: Make Android zip
        run: |
          mkdir android_client
          mv ck-android/CkClient/app/build/outputs/apk/debug/app-debug.apk android_client/DobbyVPN.apk
          zip -r android_client.zip android_client
      - name: Upload Android client
        uses: actions/upload-artifact@master
        with:
          name: android_client.zip
          path: android_client.zip          

  release:
    runs-on: ubuntu-latest
    needs: [windows_build, linux_build, macos_build, android_build]
    permissions: write-all

    steps:
      - uses: actions/checkout@v2

      - name: Make release dir
        run: mkdir release

      - name: Download linux client
        uses: actions/download-artifact@master
        with:
          name: linux_client.zip
          path: release
      - name: Download windows client
        uses: actions/download-artifact@master
        with:
          name: windows_client.zip
          path: release
      - name: Download macos client
        uses: actions/download-artifact@master
        with:
          name: macos_client.zip
          path: release
      - name: Download android client
        uses: actions/download-artifact@master
        with:
          name: android_client.zip
          path: release    
      
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
