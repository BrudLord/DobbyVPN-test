name: Release

on:
  push:
    tags:
      - 'v*'

jobs:  
  windows_build:
    runs-on: windows-latest
    strategy:
      matrix:
        go-version: [ '1.22.5' ]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
      - name: Install dependencies
        run: |
          cd src
          cd ..
      - name: Clone Cloak and copying ck-client
        run: |
          git submodule add https://github.com/cbeuw/Cloak
          git submodule init
          git submodule update
          mv -Force log-files/piper.go Cloak/internal/client/piper.go
          mv -Force log-files/connector.go Cloak/internal/client/connector.go
          mv -Force log-files/TLS.go Cloak/internal/client/TLS.go
          mv -Force log-files/copy.go Cloak/internal/common/copy.go
          mkdir Cloak/internal/out
          cp log-files/logging.go Cloak/internal/out/logging.go
          cp -r ck-client/Windows Cloak
          cp ck-client/app.go Cloak/Windows
          cp ck-client/ck-client.go Cloak/Windows
          cp ck-client/Icon.png Cloak/Windows
          cp ck-client/log_android.go Cloak/Windows
          cp ck-client/outline_device.go Cloak/Windows
          cp ck-client/outline_packet_proxy.go Cloak/Windows
          cp ck-client/protector.go Cloak/Windows
          cd Cloak/Windows
          go mod tidy
          go install fyne.io/fyne/v2/cmd/fyne@latest
          cd ../..
      - name: Build windows ck-client
        run: |
          cd Cloak/Windows
          fyne package -os windows
          cd ../..
      - name: Windows build
        run: |
          cd Cloak
          cd ..
      - name: Make windows zip
        run: |
          mkdir windows_client
          mv Cloak/Windows/Windows.exe windows_client/DobbyVPN.exe
          tar.exe -a -c -f windows_client.zip windows_client
      - name: Upload Windows client
        uses: actions/upload-artifact@master
        with:
          name: windows_client.zip
          path: windows_client.zip

          
  linux_build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.22.5' ]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
      - name: Install dependencies
        run: |
          cd src
          go get ./...
          cd ..
          sudo apt-get install golang gcc libgl1-mesa-dev xorg-dev
          sudo apt-get install gcc-multilib
          sudo apt-get install gcc-mingw-w64
      - name: Clone Cloak and copying ck-client
        run: |
          git submodule add https://github.com/cbeuw/Cloak
          git submodule init
          git submodule update
          mv -f log-files/piper.go Cloak/internal/client/piper.go
          mv -f log-files/connector.go Cloak/internal/client/connector.go
          mv -f log-files/TLS.go Cloak/internal/client/TLS.go
          mv -f log-files/copy.go Cloak/internal/common/copy.go
          mkdir Cloak/internal/out
          cp log-files/logging.go Cloak/internal/out/logging.go
          cp -r ck-client/Linux Cloak
          cp ck-client/app.go Cloak/Linux
          cp ck-client/ck-client.go Cloak/Linux
          cp ck-client/Icon.png Cloak/Linux
          cp ck-client/log_android.go Cloak/Linux
          cp ck-client/outline_device.go Cloak/Linux
          cp ck-client/outline_packet_proxy.go Cloak/Linux
          cp ck-client/protector.go Cloak/Linux
          cd Cloak/Linux
          go mod tidy
          cd ../..
      - name: Build linux ck-client
        run: |
          cd Cloak/Linux
          go build -o main .
          cd ../..
      - name: Linux build
        run: |
          cp -r Autorization Cloak
          cd Cloak/Autorization
          go mod tidy
          go build -o DobbyVPN main_linux.go
          cd ..
      - name: Make linux zip
        run: |
          mkdir linux_client
          cd linux_client
          mkdir libs
          cd ..
          mv Cloak/Linux/main linux_client/libs/main
          mv Cloak/Autorization/DobbyVPN linux_client/DobbyVPN
          zip -r linux_client.zip linux_client
      - name: Upload Linux client
        uses: actions/upload-artifact@master
        with:
          name: linux_client.zip
          path: linux_client.zip

  linux_arm64_build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.22.5' ]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'

      - name: Install dependencies
        run: |
          cd src
          go get ./...
          cd ..
          sudo apt-get install golang libgl1-mesa-dev xorg-dev
      - name: Clone Cloak and copying ck-client
        run: |
          git submodule add https://github.com/cbeuw/Cloak
          git submodule init
          git submodule update
          mv -f log-files/piper.go Cloak/internal/client/piper.go
          mv -f log-files/connector.go Cloak/internal/client/connector.go
          mv -f log-files/TLS.go Cloak/internal/client/TLS.go
          mv -f log-files/copy.go Cloak/internal/common/copy.go
          mkdir Cloak/internal/out
          cp log-files/logging.go Cloak/internal/out/logging.go
          cp ck-client/Linux/app_linux.go Cloak
          cp ck-client/Linux/routing_linux.go Cloak
          cp ck-client/Linux/tun_device_linux.go Cloak
          cp ck-client/app.go Cloak
          cp ck-client/ck-client.go Cloak
          cp ck-client/Icon.png Cloak
          cp ck-client/log_android.go Cloak
          cp ck-client/outline_device.go Cloak
          cp ck-client/outline_packet_proxy.go Cloak
          cp ck-client/protector.go Cloak
          cd Cloak
          go install fyne.io/fyne/v2/cmd/fyne@latest
          go install github.com/fyne-io/fyne-cross@latest
          go mod tidy
          cd ..
      - name: Cross-compile linux arm64 ck-client using fyne-cross
        run: |
          cd Cloak
          fyne-cross linux -arch arm64 -output DobbyVPN_ARM64
          cd ..
      - name: Linux_ARM64 build
        run: |
          cp -r Autorization Cloak
          cd Cloak/Autorization
          go mod tidy
          go build -o DobbyVPN main_linux_arm64.go
          cd ..
      - name: Make linux arm64 zip
        run: |
          mkdir linux_client_arm64
          mv Cloak/fyne-cross/dist/linux-arm64/DobbyVPN_ARM64.tar.xz linux_client_arm64/DobbyVPN_ARM64.tar.xz
          mv Cloak/Autorization/DobbyVPN linux_client_arm64/DobbyVPN
          zip -r linux_client_arm64.zip linux_client_arm64
      - name: Upload Linux ARM64 client
        uses: actions/upload-artifact@master
        with:
          name: linux_client_arm64.zip
          path: linux_client_arm64.zip

  macos_amd64_build:
    runs-on: windows-latest
    strategy:
      matrix:
        go-version: [ '1.22.5' ]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'

      - name: Install 7-Zip
        run: |
          choco install 7zip -y

      - name: Download macOS SDK
        run: |
          curl -L -o macos-sdk.tar.xz https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX11.3.sdk.tar.xz
 
      - name: Extract macOS SDK
        run: |
          echo "Starting extraction"
          & "C:\Program Files\7-Zip\7z.exe" x macos-sdk.tar.xz "-o$HOME/mac-sdk"
          echo "Extraction completed"
     
      - name: Clone Cloak and copying ck-client
        run: |
          git submodule add https://github.com/cbeuw/Cloak
          git submodule init
          git submodule update
          mv -Force log-files/piper.go Cloak/internal/client/piper.go
          mv -Force log-files/connector.go Cloak/internal/client/connector.go
          mv -Force log-files/TLS.go Cloak/internal/client/TLS.go
          mv -Force log-files/copy.go Cloak/internal/common/copy.go
          mkdir Cloak/internal/out
          cp log-files/logging.go Cloak/internal/out/logging.go
          cp ck-client/MacOs/app_macos.go Cloak
          cp ck-client/MacOs/routing_macos.go Cloak
          cp ck-client/MacOs/tun_device_macos.go Cloak
          cp ck-client/app.go Cloak
          cp ck-client/ck-client.go Cloak
          cp ck-client/Icon.png Cloak
          cp ck-client/log_android.go Cloak
          cp ck-client/outline_device.go Cloak
          cp ck-client/outline_packet_proxy.go Cloak
          cp ck-client/protector.go Cloak
          cd Cloak
          go install fyne.io/fyne/v2/cmd/fyne@latest
          go install github.com/fyne-io/fyne-cross@latest
          go mod tidy
          cd ..
      - name: Cross-compile macOS amd64 ck-client using Docker
        run: |
          cd Cloak
          fyne-cross darwin -arch amd64 --macosx-sdk-path=$HOME/mac-sdk/MacOSX11.3.sdk -app-id com.example.DobbyVPN -output DobbyVPN_AMD64.app
          cd ..
      - name: MacOs_AMD64 build
        run: |
          cp -r Autorization Cloak
          cd Cloak/Autorization
          go mod tidy
          GOARCH=amd64 GOOS=darwin go build -o DobbyVPN main_macos_amd64.go
          cd ..
      - name: Make macos amd64 zip
        run: |
          mkdir macos_client_amd64
          mv Cloak/fyne-cross/dist/macos-amd64/DobbyVPN_AMD64.app macos_client_amd64/DobbyVPN_AMD64.app
          mv Cloak/Autorization/DobbyVPN macos_client_amd64/DobbyVPN
          zip -r macos_client_amd64.zip macos_client_amd64
      - name: Upload MacOs AMD64 client
        uses: actions/upload-artifact@master
        with:
          name: macos_client_amd64.zip
          path: macos_client_amd64.zip   


  macos_build_arm64:
    runs-on: macos-latest
    strategy:
      matrix:
        go-version: [ '1.22.5' ]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
      - name: Clone Cloak and copying ck-client
        run: |
          git submodule add https://github.com/cbeuw/Cloak
          git submodule init
          git submodule update
          mv -f log-files/piper.go Cloak/internal/client/piper.go
          mv -f log-files/connector.go Cloak/internal/client/connector.go
          mv -f log-files/TLS.go Cloak/internal/client/TLS.go
          mv -f log-files/copy.go Cloak/internal/common/copy.go
          mkdir Cloak/internal/out
          cp log-files/logging.go Cloak/internal/out/logging.go
          cp -r ck-client/MacOs Cloak
          cp ck-client/app.go Cloak/MacOs
          cp ck-client/ck-client.go Cloak/MacOs
          cp ck-client/Icon.png Cloak/MacOs
          cp ck-client/log_android.go Cloak/MacOs
          cp ck-client/outline_device.go Cloak/MacOs
          cp ck-client/outline_packet_proxy.go Cloak/MacOs
          cp ck-client/protector.go Cloak/MacOs
          cd Cloak/MacOs
          go mod tidy
          cd ../..

      - name: Build macos ck-client
        run: |
          cd Cloak/MacOs
          go build -o main .
          cd ../..
      - name: MacOs build
        run: |
          cp -r Autorization Cloak
          cd Cloak/Autorization
          go mod tidy
          go build -o DobbyVPN.app main_macos.go
          cd ..
      - name: Make macos zip
        run: |
          mkdir macos_client
          cd macos_client
          mkdir libs
          cd ..
          mv Cloak/MacOs/main macos_client/libs/main
          mv Cloak/Autorization/DobbyVPN.app macos_client/DobbyVPN.app
          zip -r macos_client.zip macos_client
      - name: Upload MacOs client
        uses: actions/upload-artifact@master
        with:
          name: macos_client.zip
          path: macos_client.zip
          
  android_build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.22.5' ]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Install dependencies
        run: |
          cd src
          go get ./...
          cd ..
          sudo apt-get install golang gcc libgl1-mesa-dev xorg-dev
          sudo apt-get install gcc-multilib
          sudo apt-get install gcc-mingw-w64
      - name: Android build
        run: |
          cd ck-android/CkClient
          chmod +x gradlew
          ./gradlew assembleDebug
          cd ../..
      - name: Make Android zip
        run: |
          mkdir android_client
          mv ck-android/CkClient/app/build/outputs/apk/debug/app-debug.apk android_client/DobbyVPN.apk
          zip -r android_client.zip android_client
      - name: Upload Android client
        uses: actions/upload-artifact@master
        with:
          name: android_client.zip
          path: android_client.zip          

  release:
    runs-on: ubuntu-latest
    needs: [windows_build, linux_build, linux_arm64_build, macos_amd64_build, macos_build_arm64, android_build]
    permissions: write-all

    steps:
      - uses: actions/checkout@v2

      - name: Make release dir
        run: mkdir release

      - name: Download linux client
        uses: actions/download-artifact@master
        with:
          name: linux_client.zip
          path: release
      - name: Download linux_arm64 client
        uses: actions/download-artifact@master
        with:
          name: linux_client_arm64.zip
          path: release
      - name: Download windows client
        uses: actions/download-artifact@master
        with:
          name: windows_client.zip
          path: release
      - name: Download macos_amd64 client
        uses: actions/download-artifact@master
        with:
          name: macos_client_amd64.zip
          path: release
      - name: Download macos client
        uses: actions/download-artifact@master
        with:
          name: macos_client.zip
          path: release
      - name: Download android client
        uses: actions/download-artifact@master
        with:
          name: android_client.zip
          path: release    
      
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
