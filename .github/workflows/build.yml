name: DobbyVPN Build

on: [push, workflow_dispatch, workflow_call]

env:
  # Set a known Gradle cache directory relative to the workspace.
  GRADLE_USER_HOME: ${{ runner.workspace }}/.gradle

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: aarch64
            os: macos-11
            target: macos
            lipo-arch: arm64
          - arch: amd64
            os: macos-11
            target: macos
            lipo-arch: x86_64
          - arch: amd64
            os: windows-2019
            target: windows
          - arch: amd64
            os: ubuntu-20.04
            target: linux
    name: ${{ matrix.target }} ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          check-latest: true

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.GRADLE_USER_HOME }}/caches
            ${{ env.GRADLE_USER_HOME }}/wrapper
          key: >
            ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*',
            '**/gradle-wrapper.properties', '**/libs.versions.toml') }}

      - name: Cache Jetbrains Runtime JDK
        uses: actions/cache@v4
        with:
          path: ./app/jbr
          key: jbr-${{ hashFiles('**/jbr.yaml') }}

      - name: Build with Gradle
        run: |
          cd ck-client-desktop-kotlin/Client
          chmod +x ./gradlew
          # Optionally force refresh of dependencies:
          ./gradlew build --refresh-dependencies
          # List the skiko directory to check what has been downloaded:
          ls "${{ env.GRADLE_USER_HOME }}/caches/modules-2/files-2.1/org.jetbrains.skiko"

      # (Optional) Dynamically update the conveyor configuration to use the GRADLE_USER_HOME value.
      - name: Update conveyor.conf with dynamic gradle cache path
        run: |
          # Replace the placeholder '${gradle-cache}' with the actual Gradle cache directory.
          # Ensure your conveyor.conf uses '${gradle-cache}' as a placeholder for these paths.
          sed -i "s|\${gradle-cache}|${{ env.GRADLE_USER_HOME }}|g" ck-client-desktop-kotlin/Client/conveyor.conf

      # (Optional) Alternatively, if you need to resolve the skiko JAR path dynamically,
      # you can search for it and export it as an environment variable.
      - name: Discover skiko JAR path for Windows (if applicable)
        if: matrix.target == 'windows'
        id: find_skiko
        run: |
          SKIKO_PATH=$(find "${{ env.GRADLE_USER_HOME }}" -path "*org.jetbrains.skiko/skiko-awt-runtime-windows-x64-*.jar" | head -n 1)
          if [ -z "$SKIKO_PATH" ]; then
            echo "skiko JAR not found!" && exit 1
          fi
          echo "skiko_path=$SKIKO_PATH" >> $GITHUB_OUTPUT
          echo "Found skiko JAR at: $SKIKO_PATH"
      # (If needed, modify the conveyor.conf or pass the skiko path as a parameter to Conveyor build)

      - name: Conveyor build
        uses: hydraulic-software/conveyor/actions/build@v16.0
        with:
          command: make site
          extra_flags: "--passphrase=\"${{ secrets.CONVEYOR_PASSPHRASE }}\" -f ck-client-desktop-kotlin/Client/conveyor.conf"
          signing_key: ${{ secrets.SIGNING_KEY }}
          agree_to_license: 1

      - name: CheckSum
        run: |
          rm -f icon.svg download.html
          shasum -a 256 * > checksum.txt
        working-directory: ./output

      - name: Upload files to GitHub Release
        uses: actions/upload-release-asset@v1
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          release_id: ${{ steps.create_release.outputs.id }}
          asset_path: ./output
          asset_name: ${{ matrix.target }}-${{ matrix.arch }}.tar.gz
          asset_content_type: application/gzip

      - name: Publish to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./output/index.html

      - name: Cleanup Conveyor
        if: always()
        run: |
          rm -rf .conveyor/cache/*

      - name: Display file tree with sizes
        run: |
          echo "Displaying the size of files and directories in 'output' directory:"
          du -ah output | sort -rh

      - name: Delete output directory
        run: rm -rf output
