name: DobbyVPN Build

on: [push, workflow_dispatch, workflow_call]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          check-latest: true

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: >
            ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/libs.versions.toml') }}

      - name: Build with Gradle
        run: |
          cd ck-client-desktop-kotlin/Client
          chmod +x ./gradlew
          ./gradlew build
          ls /home/runner/.gradle/caches/modules-2/files-2.1/org.jetbrains.skiko

      - name: Conveyor build for Debian package
        uses: hydraulic-software/conveyor/actions/build@v16.0
        with:
          command: make site
          extra_flags: "--passphrase=\"${{ secrets.CONVEYOR_PASSPHRASE }}\" -f ck-client-desktop-kotlin/Client/conveyor.conf"
          signing_key: ${{ secrets.SIGNING_KEY }}
          agree_to_license: 1

      - name: Display file tree with sizes after Linux build
        run: |
          echo "Displaying the size of files and directories in 'output' directory:"
          du -ah output | sort -rh

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ github.run_number }}"
          release_name: "Release v${{ github.run_number }}"
          draft: false
          prerelease: false

      - name: Upload Debian
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./output/debian/combined-vpn-client_1.0_amd64.deb
          asset_name: combined-vpn-client-linux.deb
          asset_content_type: application/deb

      - name: Upload TarGz
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./output/combined-vpn-client-1.0-linux-amd64.tar.gz
          asset_name: combined-vpn-client-linux.tar.gz
          asset_content_type: application/tar_gz

      - name: Upload MacOS aarch64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./output/combined-vpn-client-1.0-mac-aarch64.zip
          asset_name: combined-vpn-client-mac-aarch64.zip
          asset_content_type: application/mac_aarch64

      - name: Upload MacOS amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./output/combined-vpn-client-1.0-mac-amd64.zip
          asset_name: combined-vpn-client-mac-amd64.zip
          asset_content_type: application/mac_amd64

      - name: Upload Windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./output/combined-vpn-client-1.0.x64.msix
          asset_name: combined-vpn-client-windows.msix
          asset_content_type: application/windows

      - name: Cleanup Conveyor
        if: always()
        run: |
          rm -rf .conveyor/cache/*

      - name: Display file tree with sizes after Windows build
        run: |
          echo "Displaying the size of files and directories in 'output' directory:"
          du -ah output | sort -rh

      - name: Delete output directory
        run: rm -rf output
